{
  "name": "nwglobal",
  "main": "index.js",
  "version": "0.0.1",
  "description": "Node.js globals for node-webkit's HTML5",
  "keywords": [
    "node-webkit"
  ],
  "author": {
    "name": "Mithgol the Webmaster"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Mithgol/nwglobal.git"
  },
  "bugs": {
    "url": "https://github.com/Mithgol/nwglobal/issues"
  },
  "readme": "This Node.js module (`nwglobal`) provides a workaround for [node-webkit](https://github.com/rogerwang/node-webkit/)'s issues [#702](https://github.com/rogerwang/node-webkit/issues/702), [#716](https://github.com/rogerwang/node-webkit/issues/716), [#832](https://github.com/rogerwang/node-webkit/issues/832).\r\n\r\nThese issues happen in node-webkit because, as the modules run in Node context, the constructors of their global objects (such as `Date` or `ArrayBuffer` or even `Array`) differ from WebKit's.\r\n\r\n(An example below demonstrates that you may pass an array from some `<script>…</script>` to the [async](https://github.com/caolan/async/) module that you have previously `require`d, but that module cannot recognize such an array.)\r\n\r\nTo prevent the trouble, `nwglobal` exports Node's constructors. You may use them instead of the constructors available in WebKit's context, and then you may pass the resulting object instances to any Node code.\r\n\r\n# Installation\r\n\r\n* Latest packaged version: `npm install nwglobal`\r\n\r\n* Latest githubbed version: `npm install https://github.com/Mithgol/nwglobal/tarball/master`\r\n\r\nYou may visit https://github.com/Mithgol/nwglobal#readme occasionally to read the latest `README` because the package's version is not planned to grow after changes when they happen in `README` only. (However, `npm publish --force` may happen eventually.)\r\n\r\n# Example\r\n\r\nClassic async [waterfall example:](https://github.com/caolan/async/blob/b6a1336bcb0865d6d26224f9553b9e1886fe696e/README.md#waterfall)\r\n\r\n```js\r\nrequire('async').waterfall([\r\n    function(callback){\r\n        callback(null, 'one', 'two');\r\n    },\r\n    function(arg1, arg2, callback){\r\n        callback(null, 'three');\r\n    },\r\n    function(arg1, callback){\r\n        // arg1 now equals 'three'\r\n        callback(null, 'done');\r\n    }\r\n], function (err, result) {\r\n   // result now equals 'done'\r\n   console.log(result);\r\n});\r\n```\r\n\r\ndoes not report `'done'` in node-webkit ([issue #832](https://github.com/rogerwang/node-webkit/issues/832)), but can be fixed with the following changes:\r\n\r\n```js\r\nrequire('async').waterfall( require('nwglobal').Array(\r\n    function(callback){\r\n        callback(null, 'one', 'two');\r\n    },\r\n    function(arg1, arg2, callback){\r\n        callback(null, 'three');\r\n    },\r\n    function(arg1, callback){\r\n        // arg1 now equals 'three'\r\n        callback(null, 'done');\r\n    }\r\n), function (err, result) {\r\n   // result now equals 'done'\r\n   console.log(result);\r\n});\r\n```\r\n\r\n# Implementation details\r\n\r\nThe following Node.js globals are available as the exported fields of `require('nwglobal')`:\r\n\r\n* **Standard object types:** `Array`, `Boolean`, `Date`, `Function`, `Number`, `Object`, `RegExp`, `String`.\r\n\r\n* **Typed array types:** `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int16Array`, `Int32Array`, `Int8Array`, `Uint16Array`, `Uint32Array`, `Uint8Array`.\r\n\r\n* **Error types:** `Error`, `EvalError`, `RangeError`, `ReferenceError`, `SyntaxError`, `TypeError`, `URIError`.\r\n\r\n* **Special value types:** `Infinity`, `NaN`, `undefined`, `null`.\r\n\r\nHowever, the latter four (`Infinity`, `NaN`, `undefined`, `null`) are actually superglobal (i.e. they are the same in Node's and WebKit's contexts). You may use `nwglobal` to check it with the following four statements in node-webkit's “Developer Tools” console:\r\n\r\n* `null === require('nwglobal').null`\r\n\r\n* `typeof require('nwglobal').undefined === 'undefined'`\r\n\r\n* `Infinity === require('nwglobal').Infinity`\r\n\r\n* `isNaN( require('nwglobal').NaN )`\r\n\r\nThese statements are `true`. (Meaning that you won't need these four exported values IRL.)\r\n\r\n# Limits\r\n\r\nIt is not (yet?) possible to replace constructors of elementary `{}` and `[]` values, [see the discussion](https://github.com/rogerwang/node-webkit/issues/832#issuecomment-20297959) for details and a corresponding example.\r\n\r\n# License\r\n\r\nMIT License, see the LICENSE file.",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/Mithgol/nwglobal",
  "_id": "nwglobal@0.0.1",
  "_from": "nwglobal@"
}
