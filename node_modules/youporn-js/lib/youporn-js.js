//load modules
var http = require('http');
var $ = require('cheerio');
var request = require('request');
// module vars
var current_search_page=1;
var current_start_index = 1;
var videos_responses = new Array();
var valid_vids = 0;
var yp = {};


// search videos
yp.searchVideos = function (query, page, duration, order, cb){
    videos_responses = new Array();
    var req=http.get('http://fr.youporn.com/search/relevance/?category_id=0&query='+query+'&page='+page+'');
    req.on('response',function(response) { 
        var data = new Array(); 
        response.on("data", function(chunk) {
            data.push(chunk);
        });
        response.on('end',function(){
            var datas = $(data.join(''));
            var videos = {};
            try {
            var totalItems = parseInt($('#pagination li',datas).last().prev().text()) * 32;
        } catch(err) {
            return;
        }
            var list=$('.preloaded',datas).find('li');
            videos.totalItems = parseInt(totalItems);
            videos.total = list.length;
            videos.cb = cb;
            videos.items = [];
            for (var i=0; i<list.length; i++) {
                var infos = {};
                infos.link = 'http://www.youporn.com'+list[i].children[1].children[1].attribs.href;
                infos.id = infos.link.split('/')[4];
                infos.thumb = list[i].children[0].next.children[1].children[1].attribs.src;
                infos.time = '00:'+list[i].children[3].children[1].children[0].data;
                infos.title = list[i].children[0].next.children[1].children[1].attribs.alt;
                infos.views = list[i].children[3].children[3].children[0].data;
                yp.getVideoInfos(videos,infos,i);
            }
        });
    });
    req.on('error', function(e) {
        console.log("Got error: " + e.message);
    });
    req.end();
}

yp.getVideoInfos = function(videos,infos,num) {
    var req=http.get(infos.link);
    var data = new Array(); 
    req.on('response',function(response) { 
        response.on("data", function(chunk) {
            data.push(chunk);
        });
        response.on('end',function(){
            var datas = data.join('');
            try {
                var link = $('.downloadList a',datas)[1].attribs.href;
            } catch(err) {
                videos.total -=1 ;
                return;
            }
            try { 
                infos.author = $('.submitted_by a',datas)[0].children[0].data;
            } catch(err) {
                infos.author = 'unknown';
            }
            infos.resolutions=[];
            infos.resolutions['480p'] = {};
            infos.resolutions['480p']['link'] = link;
            infos.resolutions['480p']['container'] = 'mp4'
            storeVideosInfos(videos,infos,num);
        });
    });
    req.on('error', function(e) {
        console.log("Got error: " + e.message);
    });
    req.end();
}

yp.getVideoById = function(link,cb) {
    var req=request(link);
    var data = new Array(); 
    req.on('response',function(response) { 
        response.on("data", function(chunk) {
            data.push(chunk);
        });
        response.on('end',function(){
            var datas = data.join('');
            console.log(datas);
            return;
            var link = $('.downloadList a',datas)[1].attribs.href;
            infos.resolutions=[];
            infos.resolutions['480p'] = {};
            infos.resolutions['480p']['link'] = link;
            infos.resolutions['480p']['container'] = 'mp4';
            cb(infos);
        });
    });
    req.on('error', function(e) {
        console.log("Got error: " + e.message);
    });
    req.end();
}

// store videos and return it in the right order...
function storeVideosInfos(video,infos,num) {
    video.items.push(infos); 
    videos_responses[num]=video;
    if (videos_responses.length == video.total) {
        video.cb(videos_responses);
        videos_responses = new Array();
    }
}

// functions
function in_array (needle, haystack, argStrict) {
  var key = '',
    strict = !! argStrict;

  if (strict) {
    for (key in haystack) {
      if (haystack[key] === needle) {
        return true;
      }
    }
  } else {
    for (key in haystack) {
      if (haystack[key] == needle) {
        return true;
      }
    }
  }

  return false;
}

function swapHeadAndPosition(array, position) {
    var head  = array[0];
    var other = array[position % array.length];
    array[0] = other;
    array[position] = head;
    return array;
}

module.exports = yp;
