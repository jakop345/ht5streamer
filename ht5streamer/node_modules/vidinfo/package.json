{
  "name": "vidinfo",
  "version": "0.2.5",
  "author": {
    "name": "Louis T.",
    "email": "louist@ltdev.im",
    "url": "http://github.com/LouisT/vidinfo"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/LouisT/vidinfo.git"
  },
  "licenses": [
    {
      "type": "unlicensed",
      "url": "http://unlicense.org/"
    }
  ],
  "keywords": [
    "api",
    "info",
    "information",
    "meta",
    "metadata",
    "oembed",
    "vid",
    "video",
    "videos"
  ],
  "description": "Get video information from different APIs.",
  "engine": "node => 0.6",
  "main": "index.js",
  "readme": "VidInfo (v0.2.5)\n======\n\nInstall: npm install vidinfo\n\nThis project is [Unlicensed](http://unlicense.org/ \"Title\").\nIn other words, I don't care what you do with it.\nHowever, if you make something interesting, I would like to check it out.\n\nCurrent APIs supported:\n------\n   Supported Formats: JSON, CSV, INI -- XML via [YQL](http://developer.yahoo.com/yql/console/ \"Title\").\n\n   [archive.org](http://archive.org/ \"Title\")\n   [bambuser.com (1)](http://bambuser.com/api/ \"Title\")\n   [blip.tv](http://blip.tv/ \"Title\")\n   [dailymotion.com](http://www.dailymotion.com/ \"Title\")\n   [facebook.com (1,3)](http://louist.github.io/VidInfo/accessToken.html \"Title\")\n   [flickr.com (1)](http://www.flickr.com/services/api/ \"Title\")\n   [giantbomb.com (1,2)](http://www.giantbomb.com/api/ \"Title\")\n   [imdb.com (2,3)](http://imdb.com/ \"Title\")\n   [justin.tv (2)](http://www.justin.tv/ \"Title\")\n   [mag.ma](http://mag.ma/ \"Title\")\n   [on.aol.com](http://on.aol.com/ \"Title\")\n   [themoviedb.org (1)](http://www.themoviedb.org/documentation/api \"Title\")\n   [twitch.tv (2)](http://www.twitch.tv/ \"Title\")\n   [ustream.tv (2)](http://www.ustream.tv/ \"Title\")\n   [videolog.tv](http://videolog.tv/ \"Title\")\n   [vimeo.com](http://vimeo.com/ \"Title\")\n   [vzaar.com](http://vzaar.com/ \"Title\")\n   [webcams.travel (1)](http://www.webcams.travel/developers/ \"Title\")\n   [wistia.com (4)](http://wistia.com/doc/developers \"Title\")\n   [youtube.com](http://www.youtube.com/ \"Title\")\n\n    1) API key required. See \"bambuser\" example at the bottom.\n    2) This method is BETA.\n    3) More information available. See \"More Information\" below.\n    4) Requires basic auth (username:password). See \"wista\" example at the bottom.\n\noEmbed APIs:\n------\n   For more information on oEmbed visit [oEmbed.com](http://oembed.com/ \"Title\").\n   \n   [clickthrough.com](http://clickthrough.com/ \"Title\")\n   [collegehumor.com](http://collegehumor.com/ \"Title\")\n   [comedycentral.com (2)](http://comedycentral.com/ \"Title\")\n   [coub.com](http://coub.com/ \"Title\")\n   [crackle.com (2)](http://crackle.com/ \"Title\")\n   [dotsub.com](http://dotsub.com/ \"Title\")\n   [funnyordie.com (2)](http://funnyordie.com/ \"Title\")\n   [hulu.com](http://hulu.com/ \"Title\")\n   [jest.com](http://jest.com/ \"Title\")\n   [liveleak.com (2)](http://liveleak.com/ \"Title\")\n   [nfb.ca](http://nfb.ca/ \"Title\")\n   [qik.com](http://qik.com/ \"Title\")\n   [revision3.com](http://revision3.com/ \"Title\")\n   [ted.com (1)](http://ted.com/ \"Title\")\n   [trailers.apple.com (1)](http://trailers.apples.com/ \"Title\")\n   [viddler.com](http://viddler.com/ \"Title\")\n   [yahoo.com (2)](http://screen.yahoo.com/ \"Title\")\n\n    1) Uses a 3rd party oEmbed API. (https://noembed.com/)\n    2) Uses a 3rd party oEmbed API. (https://embed.ly/) \n       Requires API key, otherwise you have limited requests.\n\n   I will add more (most common) oEmbed APIs from [embed.ly](http://embed.ly/ \"Title\") eventually.\n      \n[Embed.ly](http://embed.ly/ \"Title\") API:\n------\n    WARNING: Do NOT enable embedly (./apis/embedly.js) with any other APIs!\n   \n    Embedly is a HUGE oEmbed provider and as such supports some of the APIs already in use.\n    Because of this there are conflicts. To generate the embedly.js file, see functions below.\n    After you run the embedly generator, a new file will be created at: ./apis/embedly.js\n    Embedly is too massive to display what websites it supports, so you'll have to read embedly.js yourself\n    or check the embed.ly providers list here: http://embed.ly/embed/features/providers\n\n    Services URL: http://api.embed.ly/1/services\n    API key required, signup here: https://app.embed.ly/signup/\n\nExperimental APIs: \n------\n   [livevideo.com (1)](http://www.livevideo.com/api/ \"Title\")\n   [metacafe.com](http://metacafe.com/ \"Title\")\n   [movieclips.com](http://movieclips.com/ \"Title\")\n   [muzu.tv (1)](http://www.muzu.tv/api/ \"Title\")\n   [traileraddict.com](http://www.traileraddict.com/ \"Title\")\n  \n    1) API key required. See \"bambuser\" example at the bottom.\n\nNOTE: These use [YQL](http://developer.yahoo.com/yql/console/ \"Title\") to convert XML to JSON.\n      Might switch from YQL to xml2json. \"http_get\" already supports this.\n\nMore Information:\n------\n    (imdb.com)\n        IMDB uses a 3rd party API. (http://imdbapi.org/)\n\n    (facebook.com)\n        Facebook requires an access token to be generated. The generator makes an access token\n        that lasts for 60 days. You can revisit the generator to find out when your token will expire.\n        I will look for a better method later on, but for now this is how it has to be.\n        Generator: http://louist.github.io/VidInfo/accessToken.html\n\nTODO:\n------\n    1) Find more API's to use. -- Please suggest some.\n       I have a list I'm working from, but it takes time to get them working.\n    2) Create tests.\n    3) Improve basic auth and API key support.\n    4) Clean up code and find a use for \"detectAll\".\n    5) Make a better facebook access token generator.\n       (http://louist.github.io/VidInfo/accessToken.html)\n\n    *)  Support events? I'm not sure about this yet.\n    **) Better support for XML? (Switch from YQL to xml2json?)\n\nOptions:\n------\n    apikey - The API key, when needed.\n    basicauth - Your basic auth `username:password`, when needed.\n    formatter - The formatter to use on your JSON data. See ./examples/youtubecom.js\n\n    (detectAll options)\n    nocheck - Return information on a video more than once if found multiple times. See ./examples/detectAll.js\n    keys -  An object with API keys.\n    Example: {keys:{bambuser:'EXAMPLE-KEY',themoviedb:'ANOTHER-KEY'},nocheck:true}\n\nSettings:\n------\n    format - Use the formatter, true or false.\n    enabled - Path to enabled API configs. -- Default: ./apis/enabled/\n    disabled - Path to disabled API configs. -- Default: ./apis/disabled/\n   \nSettings usage:\n------\n    var VidInfo = require('vidinfo')({format:true});\n\nShortcuts:\n------\n    Archive.org:                arch, archive, archiveorg\n    Bambuser.com:               bam, bambuser, bambusercom\n    Blip.tv:                    blip, bliptv\n    Clickthrough.com:           cthrough, clickthrough, clickthroughcom\n    Collegehumor.com*:          chumor, college, collegehumor, collegehumorcom\n    Comedycentral.com:          comcen, comedycentral, comedycentralcom\n    Coub.com:                   coub, coubcom\n    Crackle.com:                crackle, cracklecom\n    Dailymotion.com:            dmo, dailymo, dailymotion, dailymotioncom\n    Dotsub.com:                 dotsub, dotsubcom\n    Facebook.com:               fbook, fbvideo, facebook, facebookcom\n    Flickr.com:                 flickr, flickrcom\n    Funnyordie.com:             ford, funnyor, funnyordie, funnyordiecom\n    GiantBomb.com:              gbomb, giantbomb, giantbombcom\n    Hulu.com:                   hulu, hulucom\n    IMDB.com:                   imdb, imdbapiorg\n    Jest.com:                   jest, jestcom\n    Justin.tv (stream):         jtvs, jstream, justintvstream\n    Justin.tv (video clip):     jtvc, jclip, justintvclip\n    Liveleak.com:               lleak, liveleak, liveleakcom\n    Livevideo.com*:             lvid, lvideo, livevideo, livevideocom\n    Mag.ma:                     mag, magma\n    Metacafe.com*:              meta, mcafe, metacafe, metacafecom\n    Movieclips.com*:            mclips, movieclips, movieclipscom\n    Muzu.tv*:                   muzu, muzutv\n    Nfb.ca:                     nfb, nfbca\n    on.aol.com:                 onaol, onaolcom\n    Qik.com:                    qik, qikcom\n    Revision3.com:              revis, revision3, revision3com\n    Ted.com:                    ted, tedcom\n    Themoviedb.org:             tdb, tmdb, themoviedborg\n    Traileraddict.com*:         tadd, taddict, traileraddict, traileraddictcom\n    Trailers.apple.com:         tapple, trailersapple, trailersapplecom\n    Twitch.tv (stream):         ttvs, tstream, twitchtvstream\n    Twitch.tv (video clip):     ttvc, tclip, twitchtvclip\n    Ustream.tv (stream):        utvs, ustream, ustreamtvstream\n    Ustream.tv (video clip):    utvc, uclip, ustreamtvclip\n    Viddler.com:                vidd, viddler, viddlercom\n    Videolog.tv:                vlog, videolog, videologtv\n    Vimeo.com:                  vimeo, vimeocom\n    Vzaar.com:                  vzaar, vzaarcom\n    Webcams.travel:             wct, webtra, wtravel, webcamstravel\n    Wistia.com:                 wistia, wistacom\n    Yahoo.com:                  yahoo, yvideo, yahoocom\n    YouTube.com:                yt, youtube, youtubecom\n\n    *  See \"Experimental APIs\" above.\n\n    Examples:\n        VidInfo.youtube('ZRAr354usf8',console.log);\n        VidInfo.yt('ZRAr354usf8',console.log); // YouTube\n        VidInfo.dmo('xycczk',console.log); // Dailymotion\n\nFunctions:\n------\n    VidInfo.detect(url[,callback[,options]]) - Parse a URL and create an object used for 'byURL'.\n         See ./examples/detect.js\n\n    VidInfo.detectAll(string[,callback[,options]]) - Parse a string and return an object with all the IDs.\n         Options: keys - The list of keys for APIs that might need them.\n                  nocheck - Return information on a video more than once if found multiple times.\n                  Example: {keys:{bambuser:'EXAMPLE-KEY',themoviedb:'ANOTHER-KEY'},nocheck:true}\n         See ./examples/detectAll.js\n\n    VidInfo.byID(id,api,callback[,options]) - Connects to the (should be) correct API for video information.\n         See ./examples/byid.js - Changed from \"byid\" for standardization.\n\n    VidInfo.byURL(url,callback[,options]) - Connects to the (should be) correct API for video information.\n         See ./examples/byurl.js - Changed from \"byurl\" for standardization.\n\n    VidInfo.<apiname>(id,callback[,options]) -- Shortcut for 'byID'.\n         See ./examples/byapi.js\n \n    VidInfo.getAPILocation(apiname) - Get the location of an API config file. The \"apiname\" is the full name, such as \"youtubecom.\"\n         Returns: {is:<true/false>,path:<location>,file:<filename>} -- \"is\" is in enabled (true) or disabled (false) folder.\n\n    VidInfo.enable(apiname[,nomove]) - Enable an API. The \"apiname\" is the full name, such as \"youtubecom.\"\n         NOTE: Moves <apiname> from ./apis/disabled/ to ./apis/enabled/ unless \"nomove\" is true.\n\n    VidInfo.disable(apiname[,nomove]) - Disable an API. The \"apiname\" is the full name, such as \"youtubecom.\"\n         NOTE: Moves <apiname> from ./apis/enabled/ to ./apis/disabled/ unless \"nomove\" is true.   \n\n    VidInfo.genEmbedly([callback[,services url]]) - Generate/update the embedly.js config from the services url.\n          Services url: http://api.embed.ly/1/services\n          Callback arguments: {message:<string>,location:<string>,success:<boolean>}\n\nExample Usage - Look in \"examples\" folder for more examples.\n-------\n```javascript\nvar VidInfo = require('vidinfo')({format:true});\n\n// YouTube -- Only return the title and published date, using 'formatter'.\nVidInfo.byURL('http://www.youtube.com/watch?v=ZRAr354usf8',console.log,{formatter: function (data,cb) {\n       var ret = {};\n       if ('$t' in data.entry.title) {\n          ret.title = data.entry.title.$t;\n          if ('$t' in data.entry.published) {\n             ret.published = new Date(Date.parse(data.entry.published.$t));\n          }\n       };\n       cb(ret);\n}});\n  \n// YouTube by video ID.\nVidInfo.byID('ZRAr354usf8','youtube',console.log,{formatter: function (data,cb) {\n       var ret = {};\n       if ('$t' in data.entry.title) {\n          ret.title = data.entry.title.$t;\n          if ('$t' in data.entry.published) {\n             ret.published = new Date(Date.parse(data.entry.published.$t));\n          }\n       };\n       cb(ret);\n}});\n   \n// 'byID' shortcut.\nVidInfo.vimeo('61969130',console.log);\nVidInfo.youtube('ZRAr354usf8',console.log);\nVidInfo.yt('ZRAr354usf8',console.log); // YouTube\n\n// Bambuser (API Key required)\nVidInfo.byURL('http://bambuser.com/v/3453034',function (obj) {\n       console.log(obj);\n},{apikey:'APIKEY'});\n\n// Wista (Basic auth required)\nVidInfo.byURL('http://ltdev.wistia.com/medias/piywx9v8rr',function (obj,e) {\n   if (!e) {\n      console.log('(byapi) wista: '+JSON.stringify(obj)+'\\n\\n');\n    } else {\n      console.log('(byapi - ERROR) wista: '+JSON.stringify({error:true,message:obj})+'\\n\\n');\n   }\n},{basicauth:'USERNAME:PASSWORD'});\n\n// Facebook (requires access token - http://louist.github.io/VidInfo/accessToken.html)\nVidInfo.byURL('https://www.facebook.com/photo.php?v=10101580633888836&set=vb.225034700870481&type=3&theater',function (obj) {\n   console.log(JSON.stringify(obj)+'\\n\\n');\n},{apikey:'ACCESS TOKEN'});\n\n// 'detect' example. -- Prints video ID and API link in an object.\nconsole.log(VidInfo.detect('http://www.youtube.com/watch?v=ZRAr354usf8'));\n\n// 'detectAll' example. Prints an object with multiple 'detect' objects.\nconsole.log(VidInfo.detectAll('http://www.youtube.com/watch?v=ZRAr354usf8 http://bambuser.com/v/3453034 http://ltdev.wistia.com/medias/piywx9v8rr http://flic.kr/p/e9964e'));\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/LouisT/vidinfo/issues"
  },
  "_id": "vidinfo@0.2.5",
  "dist": {
    "shasum": "f44e70812241e4f60c040f7a1d6627403c871c56"
  },
  "_from": "vidinfo@",
  "_resolved": "https://registry.npmjs.org/vidinfo/-/vidinfo-0.2.5.tgz"
}
